// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.21.4
// source: driverplugin.proto

package grpc

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Response status code
type StatusCode int32

const (
	// status ok
	StatusCode_StatusOK StatusCode = 0
	// device id or device name is invalid. When registering an illegal device to iotedge, this status code will be returned
	StatusCode_InvalidDeviceIdOrDeviceName StatusCode = 1
	// invalid report data format
	StatusCode_InvalidReportDataFormat StatusCode = 2
	// the token in the header is invalid
	StatusCode_InvalidDriverAccessToken StatusCode = 3
	// no token is found in header
	StatusCode_TokenNotFound        StatusCode = 4
	StatusCode_DriverPluginNotFound StatusCode = 5
	// connection not found
	// When connecting to iotedge, you need to call the connect method first. If it is not called, this status code will be returned when sending other commands
	StatusCode_NotConnected StatusCode = 6
	// Unsupported life cycle. For example, some devices do not support certain life cycle control requests, driver plugin will return this status code
	StatusCode_UnsupportLifeCycleRequest StatusCode = 7
	// Unsupport command
	StatusCode_UnsupportCommand StatusCode = 8
	// a common error status. If the error code is not found above, you can return this general error code, and the detailed error information is placed in the errormessage field
	StatusCode_Unknown StatusCode = 9
)

// Enum value maps for StatusCode.
var (
	StatusCode_name = map[int32]string{
		0: "StatusOK",
		1: "InvalidDeviceIdOrDeviceName",
		2: "InvalidReportDataFormat",
		3: "InvalidDriverAccessToken",
		4: "TokenNotFound",
		5: "DriverPluginNotFound",
		6: "NotConnected",
		7: "UnsupportLifeCycleRequest",
		8: "UnsupportCommand",
		9: "Unknown",
	}
	StatusCode_value = map[string]int32{
		"StatusOK":                    0,
		"InvalidDeviceIdOrDeviceName": 1,
		"InvalidReportDataFormat":     2,
		"InvalidDriverAccessToken":    3,
		"TokenNotFound":               4,
		"DriverPluginNotFound":        5,
		"NotConnected":                6,
		"UnsupportLifeCycleRequest":   7,
		"UnsupportCommand":            8,
		"Unknown":                     9,
	}
)

func (x StatusCode) Enum() *StatusCode {
	p := new(StatusCode)
	*p = x
	return p
}

func (x StatusCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (StatusCode) Descriptor() protoreflect.EnumDescriptor {
	return file_driverplugin_proto_enumTypes[0].Descriptor()
}

func (StatusCode) Type() protoreflect.EnumType {
	return &file_driverplugin_proto_enumTypes[0]
}

func (x StatusCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use StatusCode.Descriptor instead.
func (StatusCode) EnumDescriptor() ([]byte, []int) {
	return file_driverplugin_proto_rawDescGZIP(), []int{0}
}

// support data types
type DataType int32

const (
	DataType_Int8        DataType = 0
	DataType_UInt8       DataType = 1
	DataType_Int16       DataType = 2
	DataType_UInt16      DataType = 3
	DataType_Int32       DataType = 4
	DataType_UInt32      DataType = 5
	DataType_Int         DataType = 6
	DataType_UInt        DataType = 7
	DataType_Int64       DataType = 8
	DataType_UInt64      DataType = 9
	DataType_Float       DataType = 10
	DataType_Double      DataType = 11
	DataType_String      DataType = 12
	DataType_Bytes       DataType = 13
	DataType_Bool        DataType = 14
	DataType_IntegerBool DataType = 15
	DataType_Datatime    DataType = 16
)

// Enum value maps for DataType.
var (
	DataType_name = map[int32]string{
		0:  "Int8",
		1:  "UInt8",
		2:  "Int16",
		3:  "UInt16",
		4:  "Int32",
		5:  "UInt32",
		6:  "Int",
		7:  "UInt",
		8:  "Int64",
		9:  "UInt64",
		10: "Float",
		11: "Double",
		12: "String",
		13: "Bytes",
		14: "Bool",
		15: "IntegerBool",
		16: "Datatime",
	}
	DataType_value = map[string]int32{
		"Int8":        0,
		"UInt8":       1,
		"Int16":       2,
		"UInt16":      3,
		"Int32":       4,
		"UInt32":      5,
		"Int":         6,
		"UInt":        7,
		"Int64":       8,
		"UInt64":      9,
		"Float":       10,
		"Double":      11,
		"String":      12,
		"Bytes":       13,
		"Bool":        14,
		"IntegerBool": 15,
		"Datatime":    16,
	}
)

func (x DataType) Enum() *DataType {
	p := new(DataType)
	*p = x
	return p
}

func (x DataType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DataType) Descriptor() protoreflect.EnumDescriptor {
	return file_driverplugin_proto_enumTypes[1].Descriptor()
}

func (DataType) Type() protoreflect.EnumType {
	return &file_driverplugin_proto_enumTypes[1]
}

func (x DataType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DataType.Descriptor instead.
func (DataType) EnumDescriptor() ([]byte, []int) {
	return file_driverplugin_proto_rawDescGZIP(), []int{1}
}

type QOS int32

const (
	QOS_qos0 QOS = 0
	QOS_qos1 QOS = 1
)

// Enum value maps for QOS.
var (
	QOS_name = map[int32]string{
		0: "qos0",
		1: "qos1",
	}
	QOS_value = map[string]int32{
		"qos0": 0,
		"qos1": 1,
	}
)

func (x QOS) Enum() *QOS {
	p := new(QOS)
	*p = x
	return p
}

func (x QOS) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (QOS) Descriptor() protoreflect.EnumDescriptor {
	return file_driverplugin_proto_enumTypes[2].Descriptor()
}

func (QOS) Type() protoreflect.EnumType {
	return &file_driverplugin_proto_enumTypes[2]
}

func (x QOS) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use QOS.Descriptor instead.
func (QOS) EnumDescriptor() ([]byte, []int) {
	return file_driverplugin_proto_rawDescGZIP(), []int{2}
}

// event level
type EventLevel int32

const (
	EventLevel_Info  EventLevel = 0
	EventLevel_Error EventLevel = 1
	EventLevel_Alarm EventLevel = 2
)

// Enum value maps for EventLevel.
var (
	EventLevel_name = map[int32]string{
		0: "Info",
		1: "Error",
		2: "Alarm",
	}
	EventLevel_value = map[string]int32{
		"Info":  0,
		"Error": 1,
		"Alarm": 2,
	}
)

func (x EventLevel) Enum() *EventLevel {
	p := new(EventLevel)
	*p = x
	return p
}

func (x EventLevel) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EventLevel) Descriptor() protoreflect.EnumDescriptor {
	return file_driverplugin_proto_enumTypes[3].Descriptor()
}

func (EventLevel) Type() protoreflect.EnumType {
	return &file_driverplugin_proto_enumTypes[3]
}

func (x EventLevel) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EventLevel.Descriptor instead.
func (EventLevel) EnumDescriptor() ([]byte, []int) {
	return file_driverplugin_proto_rawDescGZIP(), []int{3}
}

// event type enum
type EventDefType int32

const (
	EventDef_InfoEvent    EventDefType = 0
	EventDef_WarningEvent EventDefType = 1
	EventDef_AlertEvent   EventDefType = 2
)

// Enum value maps for EventDefType.
var (
	EventDefType_name = map[int32]string{
		0: "InfoEvent",
		1: "WarningEvent",
		2: "AlertEvent",
	}
	EventDefType_value = map[string]int32{
		"InfoEvent":    0,
		"WarningEvent": 1,
		"AlertEvent":   2,
	}
)

func (x EventDefType) Enum() *EventDefType {
	p := new(EventDefType)
	*p = x
	return p
}

func (x EventDefType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EventDefType) Descriptor() protoreflect.EnumDescriptor {
	return file_driverplugin_proto_enumTypes[4].Descriptor()
}

func (EventDefType) Type() protoreflect.EnumType {
	return &file_driverplugin_proto_enumTypes[4]
}

func (x EventDefType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EventDefType.Descriptor instead.
func (EventDefType) EnumDescriptor() ([]byte, []int) {
	return file_driverplugin_proto_rawDescGZIP(), []int{7, 0}
}

// DeviceStatus, enum values are online,offline,error
// online -- collecting
// offline -- stop collecting
// error -- start collecting, but some error happens
type DeviceStatus_DeviceState int32

const (
	DeviceStatus_OnlineState  DeviceStatus_DeviceState = 0
	DeviceStatus_OfflineState DeviceStatus_DeviceState = 1
	DeviceStatus_ErrorState   DeviceStatus_DeviceState = 2
)

// Enum value maps for DeviceStatus_DeviceState.
var (
	DeviceStatus_DeviceState_name = map[int32]string{
		0: "OnlineState",
		1: "OfflineState",
		2: "ErrorState",
	}
	DeviceStatus_DeviceState_value = map[string]int32{
		"OnlineState":  0,
		"OfflineState": 1,
		"ErrorState":   2,
	}
)

func (x DeviceStatus_DeviceState) Enum() *DeviceStatus_DeviceState {
	p := new(DeviceStatus_DeviceState)
	*p = x
	return p
}

func (x DeviceStatus_DeviceState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DeviceStatus_DeviceState) Descriptor() protoreflect.EnumDescriptor {
	return file_driverplugin_proto_enumTypes[5].Descriptor()
}

func (DeviceStatus_DeviceState) Type() protoreflect.EnumType {
	return &file_driverplugin_proto_enumTypes[5]
}

func (x DeviceStatus_DeviceState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DeviceStatus_DeviceState.Descriptor instead.
func (DeviceStatus_DeviceState) EnumDescriptor() ([]byte, []int) {
	return file_driverplugin_proto_rawDescGZIP(), []int{13, 0}
}

type DeviceLifeControlRequest_DeviceLifeControlCommand int32

const (
	// add a new device
	DeviceLifeControlRequest_AddDevice DeviceLifeControlRequest_DeviceLifeControlCommand = 0
	// drop a device
	DeviceLifeControlRequest_DeleteDevice DeviceLifeControlRequest_DeviceLifeControlCommand = 1
	// start collecting device data
	DeviceLifeControlRequest_StartDevice DeviceLifeControlRequest_DeviceLifeControlCommand = 2
	// stop collecting device data
	DeviceLifeControlRequest_StopDevice DeviceLifeControlRequest_DeviceLifeControlCommand = 3
	// restart collecting device data
	DeviceLifeControlRequest_RestartDevice DeviceLifeControlRequest_DeviceLifeControlCommand = 4
	// update device metadata and restart device
	DeviceLifeControlRequest_UpdateDevice DeviceLifeControlRequest_DeviceLifeControlCommand = 5
	// update device metadata, no restart
	DeviceLifeControlRequest_Reconfigure DeviceLifeControlRequest_DeviceLifeControlCommand = 6
	// probe devices in a subnet
	DeviceLifeControlRequest_ProbeDevices DeviceLifeControlRequest_DeviceLifeControlCommand = 7
	// check the device and property extensionconfig
	DeviceLifeControlRequest_CheckExtensionConfig DeviceLifeControlRequest_DeviceLifeControlCommand = 8
	DeviceLifeControlRequest_SetProperty          DeviceLifeControlRequest_DeviceLifeControlCommand = 9
)

// Enum value maps for DeviceLifeControlRequest_DeviceLifeControlCommand.
var (
	DeviceLifeControlRequest_DeviceLifeControlCommand_name = map[int32]string{
		0: "AddDevice",
		1: "DeleteDevice",
		2: "StartDevice",
		3: "StopDevice",
		4: "RestartDevice",
		5: "UpdateDevice",
		6: "Reconfigure",
		7: "ProbeDevices",
		8: "CheckExtensionConfig",
		9: "SetProperty",
	}
	DeviceLifeControlRequest_DeviceLifeControlCommand_value = map[string]int32{
		"AddDevice":            0,
		"DeleteDevice":         1,
		"StartDevice":          2,
		"StopDevice":           3,
		"RestartDevice":        4,
		"UpdateDevice":         5,
		"Reconfigure":          6,
		"ProbeDevices":         7,
		"CheckExtensionConfig": 8,
		"SetProperty":          9,
	}
)

func (x DeviceLifeControlRequest_DeviceLifeControlCommand) Enum() *DeviceLifeControlRequest_DeviceLifeControlCommand {
	p := new(DeviceLifeControlRequest_DeviceLifeControlCommand)
	*p = x
	return p
}

func (x DeviceLifeControlRequest_DeviceLifeControlCommand) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DeviceLifeControlRequest_DeviceLifeControlCommand) Descriptor() protoreflect.EnumDescriptor {
	return file_driverplugin_proto_enumTypes[6].Descriptor()
}

func (DeviceLifeControlRequest_DeviceLifeControlCommand) Type() protoreflect.EnumType {
	return &file_driverplugin_proto_enumTypes[6]
}

func (x DeviceLifeControlRequest_DeviceLifeControlCommand) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DeviceLifeControlRequest_DeviceLifeControlCommand.Descriptor instead.
func (DeviceLifeControlRequest_DeviceLifeControlCommand) EnumDescriptor() ([]byte, []int) {
	return file_driverplugin_proto_rawDescGZIP(), []int{18, 0}
}

// normal response
type Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Response     string     `protobuf:"bytes,1,opt,name=Response,proto3" json:"Response,omitempty"`
	ErrorMessage string     `protobuf:"bytes,2,opt,name=ErrorMessage,proto3" json:"ErrorMessage,omitempty"`
	StatusCode   StatusCode `protobuf:"varint,3,opt,name=StatusCode,proto3,enum=driverplugin.StatusCode" json:"StatusCode,omitempty"`
	RequestID    string     `protobuf:"bytes,4,opt,name=RequestID,proto3" json:"RequestID,omitempty"`
}

func (x *Response) Reset() {
	*x = Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_driverplugin_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Response) ProtoMessage() {}

func (x *Response) ProtoReflect() protoreflect.Message {
	mi := &file_driverplugin_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Response.ProtoReflect.Descriptor instead.
func (*Response) Descriptor() ([]byte, []int) {
	return file_driverplugin_proto_rawDescGZIP(), []int{0}
}

func (x *Response) GetResponse() string {
	if x != nil {
		return x.Response
	}
	return ""
}

func (x *Response) GetErrorMessage() string {
	if x != nil {
		return x.ErrorMessage
	}
	return ""
}

func (x *Response) GetStatusCode() StatusCode {
	if x != nil {
		return x.StatusCode
	}
	return StatusCode_StatusOK
}

func (x *Response) GetRequestID() string {
	if x != nil {
		return x.RequestID
	}
	return ""
}

// device command params
type RequestParam struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DataType DataType `protobuf:"varint,1,opt,name=DataType,proto3,enum=driverplugin.DataType" json:"DataType,omitempty"`
	Value    string   `protobuf:"bytes,2,opt,name=Value,proto3" json:"Value,omitempty"`
}

func (x *RequestParam) Reset() {
	*x = RequestParam{}
	if protoimpl.UnsafeEnabled {
		mi := &file_driverplugin_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RequestParam) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestParam) ProtoMessage() {}

func (x *RequestParam) ProtoReflect() protoreflect.Message {
	mi := &file_driverplugin_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestParam.ProtoReflect.Descriptor instead.
func (*RequestParam) Descriptor() ([]byte, []int) {
	return file_driverplugin_proto_rawDescGZIP(), []int{1}
}

func (x *RequestParam) GetDataType() DataType {
	if x != nil {
		return x.DataType
	}
	return DataType_Int8
}

func (x *RequestParam) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

// device command
type Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// module name
	Service string `protobuf:"bytes,1,opt,name=Service,proto3" json:"Service,omitempty"`
	// command name
	Command   string `protobuf:"bytes,2,opt,name=Command,proto3" json:"Command,omitempty"`
	RequestID string `protobuf:"bytes,3,opt,name=RequestID,proto3" json:"RequestID,omitempty"`
	DeviceID  string `protobuf:"bytes,4,opt,name=DeviceID,proto3" json:"DeviceID,omitempty"`
	// params, like http header
	Params      map[string]*RequestParam `protobuf:"bytes,5,rep,name=Params,proto3" json:"Params,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	RequestBody []byte                   `protobuf:"bytes,6,opt,name=RequestBody,proto3" json:"RequestBody,omitempty"`
}

func (x *Request) Reset() {
	*x = Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_driverplugin_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Request) ProtoMessage() {}

func (x *Request) ProtoReflect() protoreflect.Message {
	mi := &file_driverplugin_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Request.ProtoReflect.Descriptor instead.
func (*Request) Descriptor() ([]byte, []int) {
	return file_driverplugin_proto_rawDescGZIP(), []int{2}
}

func (x *Request) GetService() string {
	if x != nil {
		return x.Service
	}
	return ""
}

func (x *Request) GetCommand() string {
	if x != nil {
		return x.Command
	}
	return ""
}

func (x *Request) GetRequestID() string {
	if x != nil {
		return x.RequestID
	}
	return ""
}

func (x *Request) GetDeviceID() string {
	if x != nil {
		return x.DeviceID
	}
	return ""
}

func (x *Request) GetParams() map[string]*RequestParam {
	if x != nil {
		return x.Params
	}
	return nil
}

func (x *Request) GetRequestBody() []byte {
	if x != nil {
		return x.RequestBody
	}
	return nil
}

// a command response
type RequestResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// same to request id
	RequestID  string     `protobuf:"bytes,1,opt,name=RequestID,proto3" json:"RequestID,omitempty"`
	StatusCode StatusCode `protobuf:"varint,2,opt,name=StatusCode,proto3,enum=driverplugin.StatusCode" json:"StatusCode,omitempty"`
	// response header
	ResponseHeader map[string]*RequestParam `protobuf:"bytes,3,rep,name=ResponseHeader,proto3" json:"ResponseHeader,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	ResponseBody   []byte                   `protobuf:"bytes,4,opt,name=ResponseBody,proto3" json:"ResponseBody,omitempty"`
}

func (x *RequestResponse) Reset() {
	*x = RequestResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_driverplugin_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RequestResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestResponse) ProtoMessage() {}

func (x *RequestResponse) ProtoReflect() protoreflect.Message {
	mi := &file_driverplugin_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestResponse.ProtoReflect.Descriptor instead.
func (*RequestResponse) Descriptor() ([]byte, []int) {
	return file_driverplugin_proto_rawDescGZIP(), []int{3}
}

func (x *RequestResponse) GetRequestID() string {
	if x != nil {
		return x.RequestID
	}
	return ""
}

func (x *RequestResponse) GetStatusCode() StatusCode {
	if x != nil {
		return x.StatusCode
	}
	return StatusCode_StatusOK
}

func (x *RequestResponse) GetResponseHeader() map[string]*RequestParam {
	if x != nil {
		return x.ResponseHeader
	}
	return nil
}

func (x *RequestResponse) GetResponseBody() []byte {
	if x != nil {
		return x.ResponseBody
	}
	return nil
}

// device command param defination
type RequestParamDef struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DataType DataType `protobuf:"varint,1,opt,name=DataType,proto3,enum=driverplugin.DataType" json:"DataType,omitempty"`
}

func (x *RequestParamDef) Reset() {
	*x = RequestParamDef{}
	if protoimpl.UnsafeEnabled {
		mi := &file_driverplugin_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RequestParamDef) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestParamDef) ProtoMessage() {}

func (x *RequestParamDef) ProtoReflect() protoreflect.Message {
	mi := &file_driverplugin_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestParamDef.ProtoReflect.Descriptor instead.
func (*RequestParamDef) Descriptor() ([]byte, []int) {
	return file_driverplugin_proto_rawDescGZIP(), []int{4}
}

func (x *RequestParamDef) GetDataType() DataType {
	if x != nil {
		return x.DataType
	}
	return DataType_Int8
}

// device command defination
type CommandDef struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// module name
	Service string `protobuf:"bytes,1,opt,name=Service,proto3" json:"Service,omitempty"`
	// command name
	Command string `protobuf:"bytes,2,opt,name=Command,proto3" json:"Command,omitempty"`
	// params
	RequestParam map[string]*RequestParamDef `protobuf:"bytes,3,rep,name=RequestParam,proto3" json:"RequestParam,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// command extension config
	CommandExtensionConfig string `protobuf:"bytes,4,opt,name=CommandExtensionConfig,proto3" json:"CommandExtensionConfig,omitempty"`
}

func (x *CommandDef) Reset() {
	*x = CommandDef{}
	if protoimpl.UnsafeEnabled {
		mi := &file_driverplugin_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommandDef) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommandDef) ProtoMessage() {}

func (x *CommandDef) ProtoReflect() protoreflect.Message {
	mi := &file_driverplugin_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommandDef.ProtoReflect.Descriptor instead.
func (*CommandDef) Descriptor() ([]byte, []int) {
	return file_driverplugin_proto_rawDescGZIP(), []int{5}
}

func (x *CommandDef) GetService() string {
	if x != nil {
		return x.Service
	}
	return ""
}

func (x *CommandDef) GetCommand() string {
	if x != nil {
		return x.Command
	}
	return ""
}

func (x *CommandDef) GetRequestParam() map[string]*RequestParamDef {
	if x != nil {
		return x.RequestParam
	}
	return nil
}

func (x *CommandDef) GetCommandExtensionConfig() string {
	if x != nil {
		return x.CommandExtensionConfig
	}
	return ""
}

// device property defination
type PropertyDef struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// module name
	Service string `protobuf:"bytes,1,opt,name=Service,proto3" json:"Service,omitempty"`
	// property name
	Property string `protobuf:"bytes,2,opt,name=Property,proto3" json:"Property,omitempty"`
	// writeable?, true means writeable, and false is readonly, default is readonly
	WriteAble bool `protobuf:"varint,3,opt,name=WriteAble,proto3" json:"WriteAble,omitempty"`
	// max value, only valid for numbers
	MaxValue float64 `protobuf:"fixed64,4,opt,name=MaxValue,proto3" json:"MaxValue,omitempty"`
	// min value, only valid for numbers
	MinValue float64 `protobuf:"fixed64,5,opt,name=MinValue,proto3" json:"MinValue,omitempty"`
	// property unit
	Unit string `protobuf:"bytes,6,opt,name=unit,proto3" json:"unit,omitempty"`
	// data type
	DataType DataType `protobuf:"varint,7,opt,name=DataType,proto3,enum=driverplugin.DataType" json:"DataType,omitempty"`
	// property extension config
	PropertyExtensionConfig string `protobuf:"bytes,8,opt,name=PropertyExtensionConfig,proto3" json:"PropertyExtensionConfig,omitempty"`
}

func (x *PropertyDef) Reset() {
	*x = PropertyDef{}
	if protoimpl.UnsafeEnabled {
		mi := &file_driverplugin_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PropertyDef) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PropertyDef) ProtoMessage() {}

func (x *PropertyDef) ProtoReflect() protoreflect.Message {
	mi := &file_driverplugin_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PropertyDef.ProtoReflect.Descriptor instead.
func (*PropertyDef) Descriptor() ([]byte, []int) {
	return file_driverplugin_proto_rawDescGZIP(), []int{6}
}

func (x *PropertyDef) GetService() string {
	if x != nil {
		return x.Service
	}
	return ""
}

func (x *PropertyDef) GetProperty() string {
	if x != nil {
		return x.Property
	}
	return ""
}

func (x *PropertyDef) GetWriteAble() bool {
	if x != nil {
		return x.WriteAble
	}
	return false
}

func (x *PropertyDef) GetMaxValue() float64 {
	if x != nil {
		return x.MaxValue
	}
	return 0
}

func (x *PropertyDef) GetMinValue() float64 {
	if x != nil {
		return x.MinValue
	}
	return 0
}

func (x *PropertyDef) GetUnit() string {
	if x != nil {
		return x.Unit
	}
	return ""
}

func (x *PropertyDef) GetDataType() DataType {
	if x != nil {
		return x.DataType
	}
	return DataType_Int8
}

func (x *PropertyDef) GetPropertyExtensionConfig() string {
	if x != nil {
		return x.PropertyExtensionConfig
	}
	return ""
}

// device event defination
type EventDef struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// module name
	Service string `protobuf:"bytes,1,opt,name=Service,proto3" json:"Service,omitempty"`
	// event name
	Event string `protobuf:"bytes,2,opt,name=Event,proto3" json:"Event,omitempty"`
	// event type
	EventType EventDefType `protobuf:"varint,3,opt,name=EventType,proto3,enum=driverplugin.EventDefType" json:"EventType,omitempty"`
	// defailed event message
	Detail string `protobuf:"bytes,4,opt,name=Detail,proto3" json:"Detail,omitempty"`
	// event extension config
	EventExtensionConfig string `protobuf:"bytes,5,opt,name=EventExtensionConfig,proto3" json:"EventExtensionConfig,omitempty"`
}

func (x *EventDef) Reset() {
	*x = EventDef{}
	if protoimpl.UnsafeEnabled {
		mi := &file_driverplugin_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EventDef) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventDef) ProtoMessage() {}

func (x *EventDef) ProtoReflect() protoreflect.Message {
	mi := &file_driverplugin_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventDef.ProtoReflect.Descriptor instead.
func (*EventDef) Descriptor() ([]byte, []int) {
	return file_driverplugin_proto_rawDescGZIP(), []int{7}
}

func (x *EventDef) GetService() string {
	if x != nil {
		return x.Service
	}
	return ""
}

func (x *EventDef) GetEvent() string {
	if x != nil {
		return x.Event
	}
	return ""
}

func (x *EventDef) GetEventType() EventDefType {
	if x != nil {
		return x.EventType
	}
	return EventDef_InfoEvent
}

func (x *EventDef) GetDetail() string {
	if x != nil {
		return x.Detail
	}
	return ""
}

func (x *EventDef) GetEventExtensionConfig() string {
	if x != nil {
		return x.EventExtensionConfig
	}
	return ""
}

// device defination, it includes device name,id, property,event and command definations
type DeviceDef struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DeviceName string `protobuf:"bytes,1,opt,name=DeviceName,proto3" json:"DeviceName,omitempty"`
	DeviceID   string `protobuf:"bytes,2,opt,name=DeviceID,proto3" json:"DeviceID,omitempty"`
	// not necessary when register device
	ProductID             string         `protobuf:"bytes,3,opt,name=ProductID,proto3" json:"ProductID,omitempty"`
	Properties            []*PropertyDef `protobuf:"bytes,4,rep,name=properties,proto3" json:"properties,omitempty"`
	Events                []*EventDef    `protobuf:"bytes,5,rep,name=events,proto3" json:"events,omitempty"`
	Commands              []*CommandDef  `protobuf:"bytes,6,rep,name=commands,proto3" json:"commands,omitempty"`
	CollectInterval       string         `protobuf:"bytes,7,opt,name=CollectInterval,proto3" json:"CollectInterval,omitempty"`
	Timeout               string         `protobuf:"bytes,8,opt,name=Timeout,proto3" json:"Timeout,omitempty"`
	ReportOnChange        bool           `protobuf:"varint,9,opt,name=ReportOnChange,proto3" json:"ReportOnChange,omitempty"`
	DeviceExtensionConfig string         `protobuf:"bytes,10,opt,name=DeviceExtensionConfig,proto3" json:"DeviceExtensionConfig,omitempty"`
	// only valid when fetch device metadata
	StopCollecting bool `protobuf:"varint,11,opt,name=StopCollecting,proto3" json:"StopCollecting,omitempty"`
	Qos            QOS  `protobuf:"varint,12,opt,name=qos,proto3,enum=driverplugin.QOS" json:"qos,omitempty"`
}

func (x *DeviceDef) Reset() {
	*x = DeviceDef{}
	if protoimpl.UnsafeEnabled {
		mi := &file_driverplugin_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceDef) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceDef) ProtoMessage() {}

func (x *DeviceDef) ProtoReflect() protoreflect.Message {
	mi := &file_driverplugin_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceDef.ProtoReflect.Descriptor instead.
func (*DeviceDef) Descriptor() ([]byte, []int) {
	return file_driverplugin_proto_rawDescGZIP(), []int{8}
}

func (x *DeviceDef) GetDeviceName() string {
	if x != nil {
		return x.DeviceName
	}
	return ""
}

func (x *DeviceDef) GetDeviceID() string {
	if x != nil {
		return x.DeviceID
	}
	return ""
}

func (x *DeviceDef) GetProductID() string {
	if x != nil {
		return x.ProductID
	}
	return ""
}

func (x *DeviceDef) GetProperties() []*PropertyDef {
	if x != nil {
		return x.Properties
	}
	return nil
}

func (x *DeviceDef) GetEvents() []*EventDef {
	if x != nil {
		return x.Events
	}
	return nil
}

func (x *DeviceDef) GetCommands() []*CommandDef {
	if x != nil {
		return x.Commands
	}
	return nil
}

func (x *DeviceDef) GetCollectInterval() string {
	if x != nil {
		return x.CollectInterval
	}
	return ""
}

func (x *DeviceDef) GetTimeout() string {
	if x != nil {
		return x.Timeout
	}
	return ""
}

func (x *DeviceDef) GetReportOnChange() bool {
	if x != nil {
		return x.ReportOnChange
	}
	return false
}

func (x *DeviceDef) GetDeviceExtensionConfig() string {
	if x != nil {
		return x.DeviceExtensionConfig
	}
	return ""
}

func (x *DeviceDef) GetStopCollecting() bool {
	if x != nil {
		return x.StopCollecting
	}
	return false
}

func (x *DeviceDef) GetQos() QOS {
	if x != nil {
		return x.Qos
	}
	return QOS_qos0
}

// The request message containing the user's name.
type RegisterRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// device definations, these devices will be created automaticly
	DeviceDef []*DeviceDef `protobuf:"bytes,1,rep,name=DeviceDef,proto3" json:"DeviceDef,omitempty"`
}

func (x *RegisterRequest) Reset() {
	*x = RegisterRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_driverplugin_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegisterRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterRequest) ProtoMessage() {}

func (x *RegisterRequest) ProtoReflect() protoreflect.Message {
	mi := &file_driverplugin_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterRequest.ProtoReflect.Descriptor instead.
func (*RegisterRequest) Descriptor() ([]byte, []int) {
	return file_driverplugin_proto_rawDescGZIP(), []int{9}
}

func (x *RegisterRequest) GetDeviceDef() []*DeviceDef {
	if x != nil {
		return x.DeviceDef
	}
	return nil
}

type ConnectRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ConnectRequest) Reset() {
	*x = ConnectRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_driverplugin_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConnectRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConnectRequest) ProtoMessage() {}

func (x *ConnectRequest) ProtoReflect() protoreflect.Message {
	mi := &file_driverplugin_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConnectRequest.ProtoReflect.Descriptor instead.
func (*ConnectRequest) Descriptor() ([]byte, []int) {
	return file_driverplugin_proto_rawDescGZIP(), []int{10}
}

// report device datas
type Data struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Datas []byte `protobuf:"bytes,1,opt,name=Datas,proto3" json:"Datas,omitempty"`
}

func (x *Data) Reset() {
	*x = Data{}
	if protoimpl.UnsafeEnabled {
		mi := &file_driverplugin_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Data) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Data) ProtoMessage() {}

func (x *Data) ProtoReflect() protoreflect.Message {
	mi := &file_driverplugin_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Data.ProtoReflect.Descriptor instead.
func (*Data) Descriptor() ([]byte, []int) {
	return file_driverplugin_proto_rawDescGZIP(), []int{11}
}

func (x *Data) GetDatas() []byte {
	if x != nil {
		return x.Datas
	}
	return nil
}

type PropertyState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Service  string `protobuf:"bytes,1,opt,name=service,proto3" json:"service,omitempty"`
	Property string `protobuf:"bytes,2,opt,name=property,proto3" json:"property,omitempty"`
	Error    string `protobuf:"bytes,3,opt,name=error,proto3" json:"error,omitempty"`
}

func (x *PropertyState) Reset() {
	*x = PropertyState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_driverplugin_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PropertyState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PropertyState) ProtoMessage() {}

func (x *PropertyState) ProtoReflect() protoreflect.Message {
	mi := &file_driverplugin_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PropertyState.ProtoReflect.Descriptor instead.
func (*PropertyState) Descriptor() ([]byte, []int) {
	return file_driverplugin_proto_rawDescGZIP(), []int{12}
}

func (x *PropertyState) GetService() string {
	if x != nil {
		return x.Service
	}
	return ""
}

func (x *PropertyState) GetProperty() string {
	if x != nil {
		return x.Property
	}
	return ""
}

func (x *PropertyState) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

// device status
type DeviceStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	State DeviceStatus_DeviceState `protobuf:"varint,1,opt,name=State,proto3,enum=driverplugin.DeviceStatus_DeviceState" json:"State,omitempty"`
	// error reason
	Error string `protobuf:"bytes,2,opt,name=Error,proto3" json:"Error,omitempty"`
	// status timestamp
	LastEventTime  int64            `protobuf:"varint,3,opt,name=LastEventTime,proto3" json:"LastEventTime,omitempty"`
	PropertyStates []*PropertyState `protobuf:"bytes,4,rep,name=PropertyStates,proto3" json:"PropertyStates,omitempty"`
}

func (x *DeviceStatus) Reset() {
	*x = DeviceStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_driverplugin_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceStatus) ProtoMessage() {}

func (x *DeviceStatus) ProtoReflect() protoreflect.Message {
	mi := &file_driverplugin_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceStatus.ProtoReflect.Descriptor instead.
func (*DeviceStatus) Descriptor() ([]byte, []int) {
	return file_driverplugin_proto_rawDescGZIP(), []int{13}
}

func (x *DeviceStatus) GetState() DeviceStatus_DeviceState {
	if x != nil {
		return x.State
	}
	return DeviceStatus_OnlineState
}

func (x *DeviceStatus) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

func (x *DeviceStatus) GetLastEventTime() int64 {
	if x != nil {
		return x.LastEventTime
	}
	return 0
}

func (x *DeviceStatus) GetPropertyStates() []*PropertyState {
	if x != nil {
		return x.PropertyStates
	}
	return nil
}

// heartbeat messags, it contains all device status
type HeartBeat struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DeviceStatus map[string]*DeviceStatus `protobuf:"bytes,1,rep,name=DeviceStatus,proto3" json:"DeviceStatus,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *HeartBeat) Reset() {
	*x = HeartBeat{}
	if protoimpl.UnsafeEnabled {
		mi := &file_driverplugin_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HeartBeat) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HeartBeat) ProtoMessage() {}

func (x *HeartBeat) ProtoReflect() protoreflect.Message {
	mi := &file_driverplugin_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HeartBeat.ProtoReflect.Descriptor instead.
func (*HeartBeat) Descriptor() ([]byte, []int) {
	return file_driverplugin_proto_rawDescGZIP(), []int{14}
}

func (x *HeartBeat) GetDeviceStatus() map[string]*DeviceStatus {
	if x != nil {
		return x.DeviceStatus
	}
	return nil
}

// Get device metas from iotedge/iothub
type DeviceMetaFetchRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeviceMetaFetchRequest) Reset() {
	*x = DeviceMetaFetchRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_driverplugin_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceMetaFetchRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceMetaFetchRequest) ProtoMessage() {}

func (x *DeviceMetaFetchRequest) ProtoReflect() protoreflect.Message {
	mi := &file_driverplugin_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceMetaFetchRequest.ProtoReflect.Descriptor instead.
func (*DeviceMetaFetchRequest) Descriptor() ([]byte, []int) {
	return file_driverplugin_proto_rawDescGZIP(), []int{15}
}

// device metadata, it contains device defination
type DeviceMeta struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Defination *DeviceDef `protobuf:"bytes,1,opt,name=Defination,proto3" json:"Defination,omitempty"`
}

func (x *DeviceMeta) Reset() {
	*x = DeviceMeta{}
	if protoimpl.UnsafeEnabled {
		mi := &file_driverplugin_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceMeta) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceMeta) ProtoMessage() {}

func (x *DeviceMeta) ProtoReflect() protoreflect.Message {
	mi := &file_driverplugin_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceMeta.ProtoReflect.Descriptor instead.
func (*DeviceMeta) Descriptor() ([]byte, []int) {
	return file_driverplugin_proto_rawDescGZIP(), []int{16}
}

func (x *DeviceMeta) GetDefination() *DeviceDef {
	if x != nil {
		return x.Defination
	}
	return nil
}

// device metadata array
type DeviceMetas struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DeviceMetas []*DeviceMeta `protobuf:"bytes,1,rep,name=DeviceMetas,proto3" json:"DeviceMetas,omitempty"`
}

func (x *DeviceMetas) Reset() {
	*x = DeviceMetas{}
	if protoimpl.UnsafeEnabled {
		mi := &file_driverplugin_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceMetas) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceMetas) ProtoMessage() {}

func (x *DeviceMetas) ProtoReflect() protoreflect.Message {
	mi := &file_driverplugin_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceMetas.ProtoReflect.Descriptor instead.
func (*DeviceMetas) Descriptor() ([]byte, []int) {
	return file_driverplugin_proto_rawDescGZIP(), []int{17}
}

func (x *DeviceMetas) GetDeviceMetas() []*DeviceMeta {
	if x != nil {
		return x.DeviceMetas
	}
	return nil
}

// device life control request, iotedge can use this request to control driverplugin
type DeviceLifeControlRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Command   DeviceLifeControlRequest_DeviceLifeControlCommand `protobuf:"varint,1,opt,name=Command,proto3,enum=driverplugin.DeviceLifeControlRequest_DeviceLifeControlCommand" json:"Command,omitempty"`
	RequestID string                                            `protobuf:"bytes,2,opt,name=RequestID,proto3" json:"RequestID,omitempty"`
	// device metadata
	Meta           *DeviceMeta                               `protobuf:"bytes,3,opt,name=meta,proto3" json:"meta,omitempty"`
	PropertyValues []*DeviceLifeControlRequest_PropertyValue `protobuf:"bytes,4,rep,name=PropertyValues,proto3" json:"PropertyValues,omitempty"`
}

func (x *DeviceLifeControlRequest) Reset() {
	*x = DeviceLifeControlRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_driverplugin_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceLifeControlRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceLifeControlRequest) ProtoMessage() {}

func (x *DeviceLifeControlRequest) ProtoReflect() protoreflect.Message {
	mi := &file_driverplugin_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceLifeControlRequest.ProtoReflect.Descriptor instead.
func (*DeviceLifeControlRequest) Descriptor() ([]byte, []int) {
	return file_driverplugin_proto_rawDescGZIP(), []int{18}
}

func (x *DeviceLifeControlRequest) GetCommand() DeviceLifeControlRequest_DeviceLifeControlCommand {
	if x != nil {
		return x.Command
	}
	return DeviceLifeControlRequest_AddDevice
}

func (x *DeviceLifeControlRequest) GetRequestID() string {
	if x != nil {
		return x.RequestID
	}
	return ""
}

func (x *DeviceLifeControlRequest) GetMeta() *DeviceMeta {
	if x != nil {
		return x.Meta
	}
	return nil
}

func (x *DeviceLifeControlRequest) GetPropertyValues() []*DeviceLifeControlRequest_PropertyValue {
	if x != nil {
		return x.PropertyValues
	}
	return nil
}

type ReportProperty struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DataType       DataType `protobuf:"varint,1,opt,name=DataType,proto3,enum=driverplugin.DataType" json:"DataType,omitempty"`
	Value          string   `protobuf:"bytes,2,opt,name=Value,proto3" json:"Value,omitempty"`
	DeviceService  string   `protobuf:"bytes,3,opt,name=DeviceService,proto3" json:"DeviceService,omitempty"`
	DeviceProperty string   `protobuf:"bytes,4,opt,name=DeviceProperty,proto3" json:"DeviceProperty,omitempty"`
}

func (x *ReportProperty) Reset() {
	*x = ReportProperty{}
	if protoimpl.UnsafeEnabled {
		mi := &file_driverplugin_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReportProperty) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReportProperty) ProtoMessage() {}

func (x *ReportProperty) ProtoReflect() protoreflect.Message {
	mi := &file_driverplugin_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReportProperty.ProtoReflect.Descriptor instead.
func (*ReportProperty) Descriptor() ([]byte, []int) {
	return file_driverplugin_proto_rawDescGZIP(), []int{19}
}

func (x *ReportProperty) GetDataType() DataType {
	if x != nil {
		return x.DataType
	}
	return DataType_Int8
}

func (x *ReportProperty) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *ReportProperty) GetDeviceService() string {
	if x != nil {
		return x.DeviceService
	}
	return ""
}

func (x *ReportProperty) GetDeviceProperty() string {
	if x != nil {
		return x.DeviceProperty
	}
	return ""
}

type ReportMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Timestamp        int64             `protobuf:"varint,1,opt,name=Timestamp,proto3" json:"Timestamp,omitempty"`
	DeviceID         string            `protobuf:"bytes,2,opt,name=DeviceID,proto3" json:"DeviceID,omitempty"`
	ProductID        string            `protobuf:"bytes,3,opt,name=ProductID,proto3" json:"ProductID,omitempty"`
	ReportProperties []*ReportProperty `protobuf:"bytes,4,rep,name=ReportProperties,proto3" json:"ReportProperties,omitempty"`
	Qos              QOS               `protobuf:"varint,5,opt,name=qos,proto3,enum=driverplugin.QOS" json:"qos,omitempty"`
}

func (x *ReportMessage) Reset() {
	*x = ReportMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_driverplugin_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReportMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReportMessage) ProtoMessage() {}

func (x *ReportMessage) ProtoReflect() protoreflect.Message {
	mi := &file_driverplugin_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReportMessage.ProtoReflect.Descriptor instead.
func (*ReportMessage) Descriptor() ([]byte, []int) {
	return file_driverplugin_proto_rawDescGZIP(), []int{20}
}

func (x *ReportMessage) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *ReportMessage) GetDeviceID() string {
	if x != nil {
		return x.DeviceID
	}
	return ""
}

func (x *ReportMessage) GetProductID() string {
	if x != nil {
		return x.ProductID
	}
	return ""
}

func (x *ReportMessage) GetReportProperties() []*ReportProperty {
	if x != nil {
		return x.ReportProperties
	}
	return nil
}

func (x *ReportMessage) GetQos() QOS {
	if x != nil {
		return x.Qos
	}
	return QOS_qos0
}

type ReportMessages struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReportMessages []*ReportMessage `protobuf:"bytes,1,rep,name=ReportMessages,proto3" json:"ReportMessages,omitempty"`
}

func (x *ReportMessages) Reset() {
	*x = ReportMessages{}
	if protoimpl.UnsafeEnabled {
		mi := &file_driverplugin_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReportMessages) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReportMessages) ProtoMessage() {}

func (x *ReportMessages) ProtoReflect() protoreflect.Message {
	mi := &file_driverplugin_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReportMessages.ProtoReflect.Descriptor instead.
func (*ReportMessages) Descriptor() ([]byte, []int) {
	return file_driverplugin_proto_rawDescGZIP(), []int{21}
}

func (x *ReportMessages) GetReportMessages() []*ReportMessage {
	if x != nil {
		return x.ReportMessages
	}
	return nil
}

// the defination of report event
type Event struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DeviceID          string     `protobuf:"bytes,1,opt,name=DeviceID,proto3" json:"DeviceID,omitempty"`
	DeviceServiceName string     `protobuf:"bytes,2,opt,name=DeviceServiceName,proto3" json:"DeviceServiceName,omitempty"`
	DeviceEventName   string     `protobuf:"bytes,3,opt,name=DeviceEventName,proto3" json:"DeviceEventName,omitempty"`
	Value             string     `protobuf:"bytes,4,opt,name=Value,proto3" json:"Value,omitempty"`
	EventType         EventLevel `protobuf:"varint,5,opt,name=EventType,proto3,enum=driverplugin.EventLevel" json:"EventType,omitempty"`
	Timestamp         int64      `protobuf:"varint,6,opt,name=Timestamp,proto3" json:"Timestamp,omitempty"`
}

func (x *Event) Reset() {
	*x = Event{}
	if protoimpl.UnsafeEnabled {
		mi := &file_driverplugin_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Event) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Event) ProtoMessage() {}

func (x *Event) ProtoReflect() protoreflect.Message {
	mi := &file_driverplugin_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Event.ProtoReflect.Descriptor instead.
func (*Event) Descriptor() ([]byte, []int) {
	return file_driverplugin_proto_rawDescGZIP(), []int{22}
}

func (x *Event) GetDeviceID() string {
	if x != nil {
		return x.DeviceID
	}
	return ""
}

func (x *Event) GetDeviceServiceName() string {
	if x != nil {
		return x.DeviceServiceName
	}
	return ""
}

func (x *Event) GetDeviceEventName() string {
	if x != nil {
		return x.DeviceEventName
	}
	return ""
}

func (x *Event) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *Event) GetEventType() EventLevel {
	if x != nil {
		return x.EventType
	}
	return EventLevel_Info
}

func (x *Event) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

// multiple report events
type Events struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReportEvents []*Event `protobuf:"bytes,1,rep,name=ReportEvents,proto3" json:"ReportEvents,omitempty"`
}

func (x *Events) Reset() {
	*x = Events{}
	if protoimpl.UnsafeEnabled {
		mi := &file_driverplugin_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Events) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Events) ProtoMessage() {}

func (x *Events) ProtoReflect() protoreflect.Message {
	mi := &file_driverplugin_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Events.ProtoReflect.Descriptor instead.
func (*Events) Descriptor() ([]byte, []int) {
	return file_driverplugin_proto_rawDescGZIP(), []int{23}
}

func (x *Events) GetReportEvents() []*Event {
	if x != nil {
		return x.ReportEvents
	}
	return nil
}

type RegistrationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name   string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Schema []byte `protobuf:"bytes,2,opt,name=schema,proto3" json:"schema,omitempty"`
	// build in ui
	BuildIn bool   `protobuf:"varint,3,opt,name=buildIn,proto3" json:"buildIn,omitempty"`
	UiParam []byte `protobuf:"bytes,4,opt,name=uiParam,proto3" json:"uiParam,omitempty"`
}

func (x *RegistrationRequest) Reset() {
	*x = RegistrationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_driverplugin_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegistrationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegistrationRequest) ProtoMessage() {}

func (x *RegistrationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_driverplugin_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegistrationRequest.ProtoReflect.Descriptor instead.
func (*RegistrationRequest) Descriptor() ([]byte, []int) {
	return file_driverplugin_proto_rawDescGZIP(), []int{24}
}

func (x *RegistrationRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *RegistrationRequest) GetSchema() []byte {
	if x != nil {
		return x.Schema
	}
	return nil
}

func (x *RegistrationRequest) GetBuildIn() bool {
	if x != nil {
		return x.BuildIn
	}
	return false
}

func (x *RegistrationRequest) GetUiParam() []byte {
	if x != nil {
		return x.UiParam
	}
	return nil
}

type RegistrationResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Token string `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
	Error string `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
}

func (x *RegistrationResponse) Reset() {
	*x = RegistrationResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_driverplugin_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegistrationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegistrationResponse) ProtoMessage() {}

func (x *RegistrationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_driverplugin_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegistrationResponse.ProtoReflect.Descriptor instead.
func (*RegistrationResponse) Descriptor() ([]byte, []int) {
	return file_driverplugin_proto_rawDescGZIP(), []int{25}
}

func (x *RegistrationResponse) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *RegistrationResponse) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

type DeviceLifeControlRequest_PropertyValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Service  string `protobuf:"bytes,1,opt,name=service,proto3" json:"service,omitempty"`
	Property string `protobuf:"bytes,2,opt,name=property,proto3" json:"property,omitempty"`
	Value    string `protobuf:"bytes,3,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *DeviceLifeControlRequest_PropertyValue) Reset() {
	*x = DeviceLifeControlRequest_PropertyValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_driverplugin_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceLifeControlRequest_PropertyValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceLifeControlRequest_PropertyValue) ProtoMessage() {}

func (x *DeviceLifeControlRequest_PropertyValue) ProtoReflect() protoreflect.Message {
	mi := &file_driverplugin_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceLifeControlRequest_PropertyValue.ProtoReflect.Descriptor instead.
func (*DeviceLifeControlRequest_PropertyValue) Descriptor() ([]byte, []int) {
	return file_driverplugin_proto_rawDescGZIP(), []int{18, 0}
}

func (x *DeviceLifeControlRequest_PropertyValue) GetService() string {
	if x != nil {
		return x.Service
	}
	return ""
}

func (x *DeviceLifeControlRequest_PropertyValue) GetProperty() string {
	if x != nil {
		return x.Property
	}
	return ""
}

func (x *DeviceLifeControlRequest_PropertyValue) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

var File_driverplugin_proto protoreflect.FileDescriptor

var file_driverplugin_proto_rawDesc = []byte{
	0x0a, 0x12, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0c, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x70, 0x6c, 0x75, 0x67,
	0x69, 0x6e, 0x22, 0xa2, 0x01, 0x0a, 0x08, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x1a, 0x0a, 0x08, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12,
	0x38, 0x0a, 0x0a, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x70, 0x6c, 0x75, 0x67,
	0x69, 0x6e, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x0a, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x49, 0x44, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x44, 0x22, 0x58, 0x0a, 0x0c, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x32, 0x0a, 0x08, 0x44, 0x61, 0x74, 0x61, 0x54,
	0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x64, 0x72, 0x69, 0x76,
	0x65, 0x72, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x08, 0x44, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x22, 0xab, 0x02, 0x0a, 0x07, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a,
	0x07, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x43, 0x6f, 0x6d, 0x6d, 0x61,
	0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e,
	0x64, 0x12, 0x1c, 0x0a, 0x09, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x44, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x44, 0x12,
	0x1a, 0x0a, 0x08, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x44, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x44, 0x12, 0x39, 0x0a, 0x06, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x64, 0x72,
	0x69, 0x76, 0x65, 0x72, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x2e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x42, 0x6f, 0x64, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0b, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x42, 0x6f, 0x64, 0x79, 0x1a, 0x55, 0x0a, 0x0b, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x30, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x64, 0x72, 0x69, 0x76, 0x65,
	0x72, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22,
	0xc7, 0x02, 0x0a, 0x0f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x44,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49,
	0x44, 0x12, 0x38, 0x0a, 0x0a, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x70, 0x6c,
	0x75, 0x67, 0x69, 0x6e, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x52,
	0x0a, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x59, 0x0a, 0x0e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x70, 0x6c, 0x75, 0x67,
	0x69, 0x6e, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x22, 0x0a, 0x0c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x42, 0x6f, 0x64, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0c, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x6f, 0x64, 0x79, 0x1a, 0x5d, 0x0a, 0x13, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x30, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x70, 0x6c, 0x75, 0x67, 0x69,
	0x6e, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x45, 0x0a, 0x0f, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x44, 0x65, 0x66, 0x12, 0x32, 0x0a, 0x08,
	0x44, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16,
	0x2e, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x2e, 0x44, 0x61,
	0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x44, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65,
	0x22, 0xa8, 0x02, 0x0a, 0x0a, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x44, 0x65, 0x66, 0x12,
	0x18, 0x0a, 0x07, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x43, 0x6f, 0x6d,
	0x6d, 0x61, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x43, 0x6f, 0x6d, 0x6d,
	0x61, 0x6e, 0x64, 0x12, 0x4e, 0x0a, 0x0c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x64, 0x72, 0x69, 0x76,
	0x65, 0x72, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64,
	0x44, 0x65, 0x66, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x12, 0x36, 0x0a, 0x16, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x45, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x16, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x45, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x1a, 0x5e, 0x0a, 0x11, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x33, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1d, 0x2e, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e,
	0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x44, 0x65, 0x66,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x9b, 0x02, 0x0a, 0x0b,
	0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x44, 0x65, 0x66, 0x12, 0x18, 0x0a, 0x07, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74,
	0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74,
	0x79, 0x12, 0x1c, 0x0a, 0x09, 0x57, 0x72, 0x69, 0x74, 0x65, 0x41, 0x62, 0x6c, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x57, 0x72, 0x69, 0x74, 0x65, 0x41, 0x62, 0x6c, 0x65, 0x12,
	0x1a, 0x0a, 0x08, 0x4d, 0x61, 0x78, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x08, 0x4d, 0x61, 0x78, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x4d,
	0x69, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x4d,
	0x69, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x6e, 0x69, 0x74, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x6e, 0x69, 0x74, 0x12, 0x32, 0x0a, 0x08, 0x44,
	0x61, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e,
	0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x2e, 0x44, 0x61, 0x74,
	0x61, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x44, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x38, 0x0a, 0x17, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x45, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x17, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22, 0xfa, 0x01, 0x0a, 0x08, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x44, 0x65, 0x66, 0x12, 0x18, 0x0a, 0x07, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x39, 0x0a, 0x09, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x64, 0x72, 0x69, 0x76,
	0x65, 0x72, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x44, 0x65,
	0x66, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x52, 0x09, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x16, 0x0a, 0x06, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x32, 0x0a, 0x14, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x45, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22, 0x37, 0x0a,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x0d, 0x0a, 0x09, 0x49, 0x6e, 0x66, 0x6f, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x10, 0x00, 0x12, 0x10, 0x0a, 0x0c, 0x57, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x10, 0x01, 0x12, 0x0e, 0x0a, 0x0a, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x10, 0x02, 0x22, 0xf5, 0x03, 0x0a, 0x09, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x44, 0x65, 0x66, 0x12, 0x1e, 0x0a, 0x0a, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x44,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x44,
	0x12, 0x1c, 0x0a, 0x09, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x44, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x44, 0x12, 0x39,
	0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x70, 0x6c, 0x75, 0x67, 0x69,
	0x6e, 0x2e, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x44, 0x65, 0x66, 0x52, 0x0a, 0x70,
	0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x12, 0x2e, 0x0a, 0x06, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x64, 0x72, 0x69, 0x76,
	0x65, 0x72, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x44, 0x65,
	0x66, 0x52, 0x06, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x34, 0x0a, 0x08, 0x63, 0x6f, 0x6d,
	0x6d, 0x61, 0x6e, 0x64, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x64, 0x72,
	0x69, 0x76, 0x65, 0x72, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61,
	0x6e, 0x64, 0x44, 0x65, 0x66, 0x52, 0x08, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x73, 0x12,
	0x28, 0x0a, 0x0f, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76,
	0x61, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63,
	0x74, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x18, 0x0a, 0x07, 0x54, 0x69, 0x6d,
	0x65, 0x6f, 0x75, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x54, 0x69, 0x6d, 0x65,
	0x6f, 0x75, 0x74, 0x12, 0x26, 0x0a, 0x0e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x4f, 0x6e, 0x43,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x52, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x4f, 0x6e, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x34, 0x0a, 0x15, 0x44,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x44, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x12, 0x26, 0x0a, 0x0e, 0x53, 0x74, 0x6f, 0x70, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74,
	0x69, 0x6e, 0x67, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x53, 0x74, 0x6f, 0x70, 0x43,
	0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x23, 0x0a, 0x03, 0x71, 0x6f, 0x73,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x11, 0x2e, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x70,
	0x6c, 0x75, 0x67, 0x69, 0x6e, 0x2e, 0x51, 0x4f, 0x53, 0x52, 0x03, 0x71, 0x6f, 0x73, 0x22, 0x48,
	0x0a, 0x0f, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x35, 0x0a, 0x09, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x44, 0x65, 0x66, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x70, 0x6c, 0x75,
	0x67, 0x69, 0x6e, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x44, 0x65, 0x66, 0x52, 0x09, 0x44,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x44, 0x65, 0x66, 0x22, 0x10, 0x0a, 0x0e, 0x43, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x1c, 0x0a, 0x04, 0x44, 0x61,
	0x74, 0x61, 0x12, 0x14, 0x0a, 0x05, 0x44, 0x61, 0x74, 0x61, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x05, 0x44, 0x61, 0x74, 0x61, 0x73, 0x22, 0x5b, 0x0a, 0x0d, 0x50, 0x72, 0x6f, 0x70,
	0x65, 0x72, 0x74, 0x79, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x12,
	0x14, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0x8f, 0x02, 0x0a, 0x0c, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x3c, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x26, 0x2e, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x70, 0x6c,
	0x75, 0x67, 0x69, 0x6e, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x24, 0x0a, 0x0d, 0x4c, 0x61,
	0x73, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0d, 0x4c, 0x61, 0x73, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x43, 0x0a, 0x0e, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x64, 0x72, 0x69, 0x76, 0x65,
	0x72, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x2e, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x0e, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x73, 0x22, 0x40, 0x0a, 0x0b, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x12, 0x0f, 0x0a, 0x0b, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x10, 0x00, 0x12, 0x10, 0x0a, 0x0c, 0x4f, 0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x10, 0x01, 0x12, 0x0e, 0x0a, 0x0a, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x10, 0x02, 0x22, 0xb7, 0x01, 0x0a, 0x09, 0x48, 0x65, 0x61, 0x72,
	0x74, 0x42, 0x65, 0x61, 0x74, 0x12, 0x4d, 0x0a, 0x0c, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x64, 0x72,
	0x69, 0x76, 0x65, 0x72, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x2e, 0x48, 0x65, 0x61, 0x72, 0x74,
	0x42, 0x65, 0x61, 0x74, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0c, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x1a, 0x5b, 0x0a, 0x11, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x30, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x64, 0x72, 0x69,
	0x76, 0x65, 0x72, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x22, 0x18, 0x0a, 0x16, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x46,
	0x65, 0x74, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x45, 0x0a, 0x0a, 0x44,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x12, 0x37, 0x0a, 0x0a, 0x44, 0x65, 0x66,
	0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e,
	0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x2e, 0x44, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x44, 0x65, 0x66, 0x52, 0x0a, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x22, 0x49, 0x0a, 0x0b, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4d, 0x65, 0x74, 0x61,
	0x73, 0x12, 0x3a, 0x0a, 0x0b, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x70,
	0x6c, 0x75, 0x67, 0x69, 0x6e, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4d, 0x65, 0x74, 0x61,
	0x52, 0x0b, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x73, 0x22, 0xce, 0x04,
	0x0a, 0x18, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4c, 0x69, 0x66, 0x65, 0x43, 0x6f, 0x6e, 0x74,
	0x72, 0x6f, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x59, 0x0a, 0x07, 0x43, 0x6f,
	0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3f, 0x2e, 0x64, 0x72,
	0x69, 0x76, 0x65, 0x72, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x4c, 0x69, 0x66, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4c, 0x69, 0x66, 0x65, 0x43, 0x6f,
	0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x52, 0x07, 0x43, 0x6f,
	0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x49, 0x44, 0x12, 0x2c, 0x0a, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x18, 0x2e, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e,
	0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x04, 0x6d, 0x65, 0x74,
	0x61, 0x12, 0x5c, 0x0a, 0x0e, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x64, 0x72, 0x69, 0x76,
	0x65, 0x72, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4c,
	0x69, 0x66, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x2e, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x0e, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x1a,
	0x5b, 0x0a, 0x0d, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72,
	0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x72,
	0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xcf, 0x01, 0x0a,
	0x18, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4c, 0x69, 0x66, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72,
	0x6f, 0x6c, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x12, 0x0d, 0x0a, 0x09, 0x41, 0x64, 0x64,
	0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x10, 0x00, 0x12, 0x10, 0x0a, 0x0c, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x53, 0x74,
	0x61, 0x72, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x10, 0x02, 0x12, 0x0e, 0x0a, 0x0a, 0x53,
	0x74, 0x6f, 0x70, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x10, 0x03, 0x12, 0x11, 0x0a, 0x0d, 0x52,
	0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x10, 0x04, 0x12, 0x10,
	0x0a, 0x0c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x10, 0x05,
	0x12, 0x0f, 0x0a, 0x0b, 0x52, 0x65, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x65, 0x10,
	0x06, 0x12, 0x10, 0x0a, 0x0c, 0x50, 0x72, 0x6f, 0x62, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x73, 0x10, 0x07, 0x12, 0x18, 0x0a, 0x14, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x45, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x10, 0x08, 0x12, 0x0f, 0x0a,
	0x0b, 0x53, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x10, 0x09, 0x22, 0xa8,
	0x01, 0x0a, 0x0e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74,
	0x79, 0x12, 0x32, 0x0a, 0x08, 0x44, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x70, 0x6c, 0x75, 0x67,
	0x69, 0x6e, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x44, 0x61, 0x74,
	0x61, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x44,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0d, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x12, 0x26, 0x0a, 0x0e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x70, 0x65,
	0x72, 0x74, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x22, 0xd6, 0x01, 0x0a, 0x0d, 0x52, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x1a, 0x0a, 0x08, 0x44, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x44, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x49, 0x44, 0x12, 0x48, 0x0a, 0x10, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x50, 0x72, 0x6f,
	0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x2e, 0x52, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x52, 0x10, 0x52, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x12, 0x23, 0x0a,
	0x03, 0x71, 0x6f, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x11, 0x2e, 0x64, 0x72, 0x69,
	0x76, 0x65, 0x72, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x2e, 0x51, 0x4f, 0x53, 0x52, 0x03, 0x71,
	0x6f, 0x73, 0x22, 0x55, 0x0a, 0x0e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x73, 0x12, 0x43, 0x0a, 0x0e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x64,
	0x72, 0x69, 0x76, 0x65, 0x72, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x2e, 0x52, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x0e, 0x52, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x22, 0xe7, 0x01, 0x0a, 0x05, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x44, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x44, 0x12,
	0x2c, 0x0a, 0x11, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x44, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x28, 0x0a,
	0x0f, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x36, 0x0a,
	0x09, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x18, 0x2e, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x2e,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x52, 0x09, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x22, 0x41, 0x0a, 0x06, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x37, 0x0a,
	0x0c, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x70, 0x6c, 0x75, 0x67,
	0x69, 0x6e, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x0c, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x22, 0x75, 0x0a, 0x13, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x06, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x12, 0x18, 0x0a, 0x07, 0x62, 0x75, 0x69,
	0x6c, 0x64, 0x49, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x62, 0x75, 0x69, 0x6c,
	0x64, 0x49, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x75, 0x69, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x75, 0x69, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x22, 0x42, 0x0a,
	0x14, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x2a, 0xf7, 0x01, 0x0a, 0x0a, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65,
	0x12, 0x0c, 0x0a, 0x08, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4f, 0x4b, 0x10, 0x00, 0x12, 0x1f,
	0x0a, 0x1b, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49,
	0x64, 0x4f, 0x72, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x10, 0x01, 0x12,
	0x1b, 0x0a, 0x17, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x44, 0x61, 0x74, 0x61, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x10, 0x02, 0x12, 0x1c, 0x0a, 0x18,
	0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x44, 0x72, 0x69, 0x76, 0x65, 0x72, 0x41, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x10, 0x03, 0x12, 0x11, 0x0a, 0x0d, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x4e, 0x6f, 0x74, 0x46, 0x6f, 0x75, 0x6e, 0x64, 0x10, 0x04, 0x12, 0x18, 0x0a,
	0x14, 0x44, 0x72, 0x69, 0x76, 0x65, 0x72, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x4e, 0x6f, 0x74,
	0x46, 0x6f, 0x75, 0x6e, 0x64, 0x10, 0x05, 0x12, 0x10, 0x0a, 0x0c, 0x4e, 0x6f, 0x74, 0x43, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x10, 0x06, 0x12, 0x1d, 0x0a, 0x19, 0x55, 0x6e, 0x73,
	0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x4c, 0x69, 0x66, 0x65, 0x43, 0x79, 0x63, 0x6c, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x10, 0x07, 0x12, 0x14, 0x0a, 0x10, 0x55, 0x6e, 0x73, 0x75,
	0x70, 0x70, 0x6f, 0x72, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x10, 0x08, 0x12, 0x0b,
	0x0a, 0x07, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x10, 0x09, 0x2a, 0xce, 0x01, 0x0a, 0x08,
	0x44, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x12, 0x08, 0x0a, 0x04, 0x49, 0x6e, 0x74, 0x38,
	0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x55, 0x49, 0x6e, 0x74, 0x38, 0x10, 0x01, 0x12, 0x09, 0x0a,
	0x05, 0x49, 0x6e, 0x74, 0x31, 0x36, 0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06, 0x55, 0x49, 0x6e, 0x74,
	0x31, 0x36, 0x10, 0x03, 0x12, 0x09, 0x0a, 0x05, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x10, 0x04, 0x12,
	0x0a, 0x0a, 0x06, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x10, 0x05, 0x12, 0x07, 0x0a, 0x03, 0x49,
	0x6e, 0x74, 0x10, 0x06, 0x12, 0x08, 0x0a, 0x04, 0x55, 0x49, 0x6e, 0x74, 0x10, 0x07, 0x12, 0x09,
	0x0a, 0x05, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x10, 0x08, 0x12, 0x0a, 0x0a, 0x06, 0x55, 0x49, 0x6e,
	0x74, 0x36, 0x34, 0x10, 0x09, 0x12, 0x09, 0x0a, 0x05, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x10, 0x0a,
	0x12, 0x0a, 0x0a, 0x06, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x10, 0x0b, 0x12, 0x0a, 0x0a, 0x06,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x10, 0x0c, 0x12, 0x09, 0x0a, 0x05, 0x42, 0x79, 0x74, 0x65,
	0x73, 0x10, 0x0d, 0x12, 0x08, 0x0a, 0x04, 0x42, 0x6f, 0x6f, 0x6c, 0x10, 0x0e, 0x12, 0x0f, 0x0a,
	0x0b, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x42, 0x6f, 0x6f, 0x6c, 0x10, 0x0f, 0x12, 0x0c,
	0x0a, 0x08, 0x44, 0x61, 0x74, 0x61, 0x74, 0x69, 0x6d, 0x65, 0x10, 0x10, 0x2a, 0x19, 0x0a, 0x03,
	0x51, 0x4f, 0x53, 0x12, 0x08, 0x0a, 0x04, 0x71, 0x6f, 0x73, 0x30, 0x10, 0x00, 0x12, 0x08, 0x0a,
	0x04, 0x71, 0x6f, 0x73, 0x31, 0x10, 0x01, 0x2a, 0x2c, 0x0a, 0x0a, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x08, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x10, 0x00, 0x12,
	0x09, 0x0a, 0x05, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x10, 0x01, 0x12, 0x09, 0x0a, 0x05, 0x41, 0x6c,
	0x61, 0x72, 0x6d, 0x10, 0x02, 0x32, 0xe2, 0x06, 0x0a, 0x0c, 0x44, 0x72, 0x69, 0x76, 0x65, 0x72,
	0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x12, 0x41, 0x0a, 0x07, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x12, 0x1c, 0x2e, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e,
	0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x16, 0x2e, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x2e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x54, 0x0a, 0x0f, 0x46, 0x65, 0x74,
	0x63, 0x68, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x12, 0x24, 0x2e, 0x64,
	0x72, 0x69, 0x76, 0x65, 0x72, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x2e, 0x44, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x46, 0x65, 0x74, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x19, 0x2e, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x70, 0x6c, 0x75, 0x67, 0x69,
	0x6e, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x73, 0x22, 0x00, 0x12,
	0x41, 0x0a, 0x0d, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x44, 0x61, 0x74, 0x61,
	0x12, 0x12, 0x2e, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x2e,
	0x44, 0x61, 0x74, 0x61, 0x1a, 0x16, 0x2e, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x70, 0x6c, 0x75,
	0x67, 0x69, 0x6e, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x28, 0x01,
	0x30, 0x01, 0x12, 0x42, 0x0a, 0x0d, 0x53, 0x65, 0x6e, 0x64, 0x48, 0x65, 0x61, 0x72, 0x74, 0x42,
	0x65, 0x61, 0x74, 0x12, 0x17, 0x2e, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x70, 0x6c, 0x75, 0x67,
	0x69, 0x6e, 0x2e, 0x48, 0x65, 0x61, 0x72, 0x74, 0x42, 0x65, 0x61, 0x74, 0x1a, 0x16, 0x2e, 0x64,
	0x72, 0x69, 0x76, 0x65, 0x72, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x2e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x4a, 0x0a, 0x0c, 0x45, 0x78, 0x65, 0x63, 0x43, 0x6f,
	0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x73, 0x12, 0x1d, 0x2e, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x70,
	0x6c, 0x75, 0x67, 0x69, 0x6e, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x1a, 0x15, 0x2e, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x70, 0x6c,
	0x75, 0x67, 0x69, 0x6e, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x00, 0x28, 0x01,
	0x30, 0x01, 0x12, 0x59, 0x0a, 0x11, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4c, 0x69, 0x66, 0x65,
	0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x12, 0x16, 0x2e, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72,
	0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x1a,
	0x26, 0x2e, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x2e, 0x44,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x4c, 0x69, 0x66, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x00, 0x28, 0x01, 0x30, 0x01, 0x12, 0x4d, 0x0a,
	0x10, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x52, 0x61, 0x77, 0x44, 0x61, 0x74,
	0x61, 0x12, 0x1b, 0x2e, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e,
	0x2e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x1a, 0x16,
	0x2e, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x2e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x28, 0x01, 0x30, 0x01, 0x12, 0x53, 0x0a, 0x15,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x42, 0x61, 0x74, 0x63, 0x68, 0x52, 0x61,
	0x77, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1c, 0x2e, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x70, 0x6c,
	0x75, 0x67, 0x69, 0x6e, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x73, 0x1a, 0x16, 0x2e, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x70, 0x6c, 0x75, 0x67,
	0x69, 0x6e, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x28, 0x01, 0x30,
	0x01, 0x12, 0x40, 0x0a, 0x0b, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x12, 0x13, 0x2e, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x2e,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x1a, 0x16, 0x2e, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x70, 0x6c,
	0x75, 0x67, 0x69, 0x6e, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x28,
	0x01, 0x30, 0x01, 0x12, 0x46, 0x0a, 0x10, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x42, 0x61, 0x74,
	0x63, 0x68, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x14, 0x2e, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72,
	0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x1a, 0x16, 0x2e,
	0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x2e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x28, 0x01, 0x30, 0x01, 0x12, 0x5d, 0x0a, 0x12, 0x44,
	0x72, 0x69, 0x76, 0x65, 0x72, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x21, 0x2e, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e,
	0x2e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x70, 0x6c, 0x75,
	0x67, 0x69, 0x6e, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0x12, 0x5a, 0x10, 0x70, 0x6b,
	0x67, 0x2f, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73, 0x2f, 0x67, 0x72, 0x70, 0x63, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_driverplugin_proto_rawDescOnce sync.Once
	file_driverplugin_proto_rawDescData = file_driverplugin_proto_rawDesc
)

func file_driverplugin_proto_rawDescGZIP() []byte {
	file_driverplugin_proto_rawDescOnce.Do(func() {
		file_driverplugin_proto_rawDescData = protoimpl.X.CompressGZIP(file_driverplugin_proto_rawDescData)
	})
	return file_driverplugin_proto_rawDescData
}

var file_driverplugin_proto_enumTypes = make([]protoimpl.EnumInfo, 7)
var file_driverplugin_proto_msgTypes = make([]protoimpl.MessageInfo, 31)
var file_driverplugin_proto_goTypes = []interface{}{
	(StatusCode)(0),               // 0: driverplugin.StatusCode
	(DataType)(0),                 // 1: driverplugin.DataType
	(QOS)(0),                      // 2: driverplugin.QOS
	(EventLevel)(0),               // 3: driverplugin.EventLevel
	(EventDefType)(0),             // 4: driverplugin.EventDef.type
	(DeviceStatus_DeviceState)(0), // 5: driverplugin.DeviceStatus.DeviceState
	(DeviceLifeControlRequest_DeviceLifeControlCommand)(0), // 6: driverplugin.DeviceLifeControlRequest.DeviceLifeControlCommand
	(*Response)(nil),                 // 7: driverplugin.Response
	(*RequestParam)(nil),             // 8: driverplugin.RequestParam
	(*Request)(nil),                  // 9: driverplugin.Request
	(*RequestResponse)(nil),          // 10: driverplugin.RequestResponse
	(*RequestParamDef)(nil),          // 11: driverplugin.RequestParamDef
	(*CommandDef)(nil),               // 12: driverplugin.CommandDef
	(*PropertyDef)(nil),              // 13: driverplugin.PropertyDef
	(*EventDef)(nil),                 // 14: driverplugin.EventDef
	(*DeviceDef)(nil),                // 15: driverplugin.DeviceDef
	(*RegisterRequest)(nil),          // 16: driverplugin.RegisterRequest
	(*ConnectRequest)(nil),           // 17: driverplugin.ConnectRequest
	(*Data)(nil),                     // 18: driverplugin.Data
	(*PropertyState)(nil),            // 19: driverplugin.PropertyState
	(*DeviceStatus)(nil),             // 20: driverplugin.DeviceStatus
	(*HeartBeat)(nil),                // 21: driverplugin.HeartBeat
	(*DeviceMetaFetchRequest)(nil),   // 22: driverplugin.DeviceMetaFetchRequest
	(*DeviceMeta)(nil),               // 23: driverplugin.DeviceMeta
	(*DeviceMetas)(nil),              // 24: driverplugin.DeviceMetas
	(*DeviceLifeControlRequest)(nil), // 25: driverplugin.DeviceLifeControlRequest
	(*ReportProperty)(nil),           // 26: driverplugin.ReportProperty
	(*ReportMessage)(nil),            // 27: driverplugin.ReportMessage
	(*ReportMessages)(nil),           // 28: driverplugin.ReportMessages
	(*Event)(nil),                    // 29: driverplugin.Event
	(*Events)(nil),                   // 30: driverplugin.Events
	(*RegistrationRequest)(nil),      // 31: driverplugin.RegistrationRequest
	(*RegistrationResponse)(nil),     // 32: driverplugin.RegistrationResponse
	nil,                              // 33: driverplugin.Request.ParamsEntry
	nil,                              // 34: driverplugin.RequestResponse.ResponseHeaderEntry
	nil,                              // 35: driverplugin.CommandDef.RequestParamEntry
	nil,                              // 36: driverplugin.HeartBeat.DeviceStatusEntry
	(*DeviceLifeControlRequest_PropertyValue)(nil), // 37: driverplugin.DeviceLifeControlRequest.PropertyValue
}
var file_driverplugin_proto_depIdxs = []int32{
	0,  // 0: driverplugin.Response.StatusCode:type_name -> driverplugin.StatusCode
	1,  // 1: driverplugin.RequestParam.DataType:type_name -> driverplugin.DataType
	33, // 2: driverplugin.Request.Params:type_name -> driverplugin.Request.ParamsEntry
	0,  // 3: driverplugin.RequestResponse.StatusCode:type_name -> driverplugin.StatusCode
	34, // 4: driverplugin.RequestResponse.ResponseHeader:type_name -> driverplugin.RequestResponse.ResponseHeaderEntry
	1,  // 5: driverplugin.RequestParamDef.DataType:type_name -> driverplugin.DataType
	35, // 6: driverplugin.CommandDef.RequestParam:type_name -> driverplugin.CommandDef.RequestParamEntry
	1,  // 7: driverplugin.PropertyDef.DataType:type_name -> driverplugin.DataType
	4,  // 8: driverplugin.EventDef.EventType:type_name -> driverplugin.EventDef.type
	13, // 9: driverplugin.DeviceDef.properties:type_name -> driverplugin.PropertyDef
	14, // 10: driverplugin.DeviceDef.events:type_name -> driverplugin.EventDef
	12, // 11: driverplugin.DeviceDef.commands:type_name -> driverplugin.CommandDef
	2,  // 12: driverplugin.DeviceDef.qos:type_name -> driverplugin.QOS
	15, // 13: driverplugin.RegisterRequest.DeviceDef:type_name -> driverplugin.DeviceDef
	5,  // 14: driverplugin.DeviceStatus.State:type_name -> driverplugin.DeviceStatus.DeviceState
	19, // 15: driverplugin.DeviceStatus.PropertyStates:type_name -> driverplugin.PropertyState
	36, // 16: driverplugin.HeartBeat.DeviceStatus:type_name -> driverplugin.HeartBeat.DeviceStatusEntry
	15, // 17: driverplugin.DeviceMeta.Defination:type_name -> driverplugin.DeviceDef
	23, // 18: driverplugin.DeviceMetas.DeviceMetas:type_name -> driverplugin.DeviceMeta
	6,  // 19: driverplugin.DeviceLifeControlRequest.Command:type_name -> driverplugin.DeviceLifeControlRequest.DeviceLifeControlCommand
	23, // 20: driverplugin.DeviceLifeControlRequest.meta:type_name -> driverplugin.DeviceMeta
	37, // 21: driverplugin.DeviceLifeControlRequest.PropertyValues:type_name -> driverplugin.DeviceLifeControlRequest.PropertyValue
	1,  // 22: driverplugin.ReportProperty.DataType:type_name -> driverplugin.DataType
	26, // 23: driverplugin.ReportMessage.ReportProperties:type_name -> driverplugin.ReportProperty
	2,  // 24: driverplugin.ReportMessage.qos:type_name -> driverplugin.QOS
	27, // 25: driverplugin.ReportMessages.ReportMessages:type_name -> driverplugin.ReportMessage
	3,  // 26: driverplugin.Event.EventType:type_name -> driverplugin.EventLevel
	29, // 27: driverplugin.Events.ReportEvents:type_name -> driverplugin.Event
	8,  // 28: driverplugin.Request.ParamsEntry.value:type_name -> driverplugin.RequestParam
	8,  // 29: driverplugin.RequestResponse.ResponseHeaderEntry.value:type_name -> driverplugin.RequestParam
	11, // 30: driverplugin.CommandDef.RequestParamEntry.value:type_name -> driverplugin.RequestParamDef
	20, // 31: driverplugin.HeartBeat.DeviceStatusEntry.value:type_name -> driverplugin.DeviceStatus
	17, // 32: driverplugin.DriverPlugin.Connect:input_type -> driverplugin.ConnectRequest
	22, // 33: driverplugin.DriverPlugin.FetchDeviceMeta:input_type -> driverplugin.DeviceMetaFetchRequest
	18, // 34: driverplugin.DriverPlugin.TransformData:input_type -> driverplugin.Data
	21, // 35: driverplugin.DriverPlugin.SendHeartBeat:input_type -> driverplugin.HeartBeat
	10, // 36: driverplugin.DriverPlugin.ExecCommands:input_type -> driverplugin.RequestResponse
	7,  // 37: driverplugin.DriverPlugin.DeviceLifeControl:input_type -> driverplugin.Response
	27, // 38: driverplugin.DriverPlugin.TransformRawData:input_type -> driverplugin.ReportMessage
	28, // 39: driverplugin.DriverPlugin.TransformBatchRawData:input_type -> driverplugin.ReportMessages
	29, // 40: driverplugin.DriverPlugin.ReportEvent:input_type -> driverplugin.Event
	30, // 41: driverplugin.DriverPlugin.ReportBatchEvent:input_type -> driverplugin.Events
	31, // 42: driverplugin.DriverPlugin.DriverRegistration:input_type -> driverplugin.RegistrationRequest
	7,  // 43: driverplugin.DriverPlugin.Connect:output_type -> driverplugin.Response
	24, // 44: driverplugin.DriverPlugin.FetchDeviceMeta:output_type -> driverplugin.DeviceMetas
	7,  // 45: driverplugin.DriverPlugin.TransformData:output_type -> driverplugin.Response
	7,  // 46: driverplugin.DriverPlugin.SendHeartBeat:output_type -> driverplugin.Response
	9,  // 47: driverplugin.DriverPlugin.ExecCommands:output_type -> driverplugin.Request
	25, // 48: driverplugin.DriverPlugin.DeviceLifeControl:output_type -> driverplugin.DeviceLifeControlRequest
	7,  // 49: driverplugin.DriverPlugin.TransformRawData:output_type -> driverplugin.Response
	7,  // 50: driverplugin.DriverPlugin.TransformBatchRawData:output_type -> driverplugin.Response
	7,  // 51: driverplugin.DriverPlugin.ReportEvent:output_type -> driverplugin.Response
	7,  // 52: driverplugin.DriverPlugin.ReportBatchEvent:output_type -> driverplugin.Response
	32, // 53: driverplugin.DriverPlugin.DriverRegistration:output_type -> driverplugin.RegistrationResponse
	43, // [43:54] is the sub-list for method output_type
	32, // [32:43] is the sub-list for method input_type
	32, // [32:32] is the sub-list for extension type_name
	32, // [32:32] is the sub-list for extension extendee
	0,  // [0:32] is the sub-list for field type_name
}

func init() { file_driverplugin_proto_init() }
func file_driverplugin_proto_init() {
	if File_driverplugin_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_driverplugin_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_driverplugin_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RequestParam); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_driverplugin_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_driverplugin_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RequestResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_driverplugin_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RequestParamDef); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_driverplugin_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommandDef); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_driverplugin_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PropertyDef); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_driverplugin_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EventDef); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_driverplugin_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceDef); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_driverplugin_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegisterRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_driverplugin_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConnectRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_driverplugin_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Data); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_driverplugin_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PropertyState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_driverplugin_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_driverplugin_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HeartBeat); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_driverplugin_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceMetaFetchRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_driverplugin_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceMeta); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_driverplugin_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceMetas); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_driverplugin_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceLifeControlRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_driverplugin_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReportProperty); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_driverplugin_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReportMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_driverplugin_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReportMessages); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_driverplugin_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Event); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_driverplugin_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Events); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_driverplugin_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegistrationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_driverplugin_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegistrationResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_driverplugin_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceLifeControlRequest_PropertyValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_driverplugin_proto_rawDesc,
			NumEnums:      7,
			NumMessages:   31,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_driverplugin_proto_goTypes,
		DependencyIndexes: file_driverplugin_proto_depIdxs,
		EnumInfos:         file_driverplugin_proto_enumTypes,
		MessageInfos:      file_driverplugin_proto_msgTypes,
	}.Build()
	File_driverplugin_proto = out.File
	file_driverplugin_proto_rawDesc = nil
	file_driverplugin_proto_goTypes = nil
	file_driverplugin_proto_depIdxs = nil
}
